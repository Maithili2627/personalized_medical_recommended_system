# -*- coding: utf-8 -*-
"""Personalized_Medical_Recommended_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GbnIBqWagAXQTvmvNUJz5Aq9F1g4JRpT
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

medicines = pd.read_csv("https://raw.githubusercontent.com/anurag-b72/medicine-recommendation-system/main/medicine.csv")

medicines.head()

medicines.shape

medicines.isnull().sum()

medicines.dropna(inplace=True)

medicines.duplicated().sum()

medicines['Description']

medicines['Description'].apply(lambda x:x.split())

medicines['Reason'] = medicines['Reason'].apply(lambda x:x.split())
medicines['Description'] = medicines['Description'].apply(lambda x:x.split())

medicines['Description'] = medicines['Description'].apply(lambda x:[i.replace(" ","") for i in x])

medicines['Description'] = medicines['Description'].apply(lambda x:[i.replace(" ","") for i in x])

medicines['tags'] = medicines['Description'] + medicines['Reason']

new_df = medicines[['index','Drug_Name','tags']]

new_df

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))

new_df

new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())

new_df

!pip install nltk

import nltk

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

!pip install -U scikit-learn scipy matplotlib

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(stop_words='english',max_features=5000)

def stem(text):
  y = []

  for i in text.split():
    y.append(ps.stem(i))

  return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)

cv.fit_transform(new_df['tags']).toarray().shape

vectors = cv.fit_transform(new_df['tags']).toarray()

cv.get_feature_names()

from sklearn.metrics.pairwise import cosine_similarity



cv.get_feature_names()

cosine_similarity(vectors)

similarity = cosine_similarity(vectors)

similarity[1]

def recommend(medicine):
    medicine_index = new_df[new_df['Drug_Name'] == medicine].index[0]
    distances = similarity[medicine_index]
    medicines_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]
    
    for i in medicines_list:
        print(new_df.iloc[i[0]].Drug_Name)

recommend("Paracetamol 125mg Syrup 60mlParacetamol 500mg Tablet 10'S")

import pickle

pickle.dump(new_df.to_dict(),open('medicine_dict.pkl','wb'))
pickle.dump(similarity,open('similarity.pkl','wb'))